name: Test jsbc.KodiLib

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kodi-tag: [Matrix, Nexus, Omega]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Verify Docker
        run: docker --version

      - name: Prepare PulseAudio and config volume
        run: |
            set -euxo pipefail
            sudo apt-get update
            sudo apt-get install -y pulseaudio
            pulseaudio --start --exit-idle-time=-1
            export PULSE_SERVER=127.0.0.1
            rm -rf kodi-config
            mkdir -p kodi-config/.kodi/userdata
            cat > kodi-config/.kodi/userdata/advancedsettings.xml <<'EOF'
            <advancedsettings>
              <loglevel>2</loglevel>
              <video>
                <headless>true</headless>
              </video>
            </advancedsettings>
            EOF

      - name: First (initializing) Kodi start
        run: |
          set -euxo pipefail
          export PULSE_SERVER=127.0.0.1
          docker pull fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}
          docker run -d --name kodi-init \
            -p 5900:5900 \
            -e PUID=$(id -u) \
            -e PGID=$(id -g) \
            -e TZ=UTC \
            -e PULSE_SERVER=127.0.0.1 \
            -v "$(pwd)/kodi-config:/data" \
            fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}

          echo "Waiting for Kodi to generate guisettings.xml..."
          timeout 60 bash -c 'until [ -s "kodi-config/.kodi/userdata/guisettings.xml" ]; do sleep 2; done'
          # Small grace to ensure Kodi finished its first-write cycle
          sleep 5
          echo "Generated guisettings.xml:"
          ls -l kodi-config/.kodi/userdata/guisettings.xml || true
          echo "Stopping initialization container..."
          docker stop kodi-init
          docker rm kodi-init

      - name: Adjust ownership and patch guisettings.xml
        run: |
          set -euxo pipefail
          GS="kodi-config/.kodi/userdata/guisettings.xml"
          echo "Before chown:"
          ls -l "$GS" || true
          # Take ownership so sed can edit
          sudo chown -R $(id -u):$(id -g) kodi-config/.kodi/userdata
          echo "After chown:"
          ls -l "$GS" || true

          # Sanity check presence
            grep -q 'services.webserver' "$GS" || { echo "services.webserver not found in guisettings.xml"; head -n 60 "$GS"; }

          # Patch values
          sed -i -E 's#(<setting id="services.webserver"[^>]*>)(true|false)(</setting>)#\1true\3#' "$GS"
          sed -i -E 's#(<setting id="services.webserverauthentication"[^>]*>)(true|false)(</setting>)#\1false\3#' "$GS"
          sed -i -E 's#(<setting id="services.webserverport"[^>]*>)[0-9]+(</setting>)#\18080\2#' "$GS"

          # Keep username but disable auth => ignored
          if grep -q 'services.webserverusername' "$GS"; then
            sed -i -E 's#(<setting id="services.webserverusername"[^>]*>).*?(</setting>)#\1kodi\2#' "$GS" || true
          fi
          # Ensure password node self-closing form remains (auth disabled)
          if grep -q 'services.webserverpassword' "$GS"; then
            # No change needed, but normalize spacing
            sed -i -E 's#(<setting id="services.webserverpassword"[^>]*)/>#\1 />#' "$GS" || true
          fi

          echo "Patched webserver lines:"
          grep -i -E 'webserver' "$GS" || true

      - name: Second (runtime) Kodi start and readiness (log-based)
        run: |
          set -euxo pipefail
          export PULSE_SERVER=127.0.0.1
          docker run -d --name kodi-runtime \
            -p 8080:8080 \
            -p 8000:8000 \
            -p 5900:5900 \
            -p 9090:9090 \
            -p 9777:9777/udp \
            -e PUID=$(id -u) \
            -e PGID=$(id -g) \
            -e TZ=UTC \
            -e PULSE_SERVER=127.0.0.1 \
            -v "$(pwd)/kodi-config:/data" \
            fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}

          echo "Waiting (max 120s) for Kodi core readiness (JSONRPC initialized)..."
          start=$(date +%s)
          while true; do
            if docker exec kodi-runtime sh -c 'grep -q "JSONRPC Server: Successfully initialized" /data/.kodi/temp/kodi.log 2>/dev/null'; then
              echo "Kodi JSONRPC core initialized."
              break
            fi
            if (( $(date +%s) - start > 120 )); then
              echo "Timeout waiting for JSONRPC init line."
              docker exec kodi-runtime sh -c 'tail -n 200 /data/.kodi/temp/kodi.log || ls -l /data/.kodi/temp'
              exit 1
            fi
            sleep 2
          done

          # Optional: attempt HTTP webserver probe (non-fatal)
            if curl -sf -H 'Content-Type: application/json' \
                 --data '{"jsonrpc":"2.0","method":"JSONRPC.Ping","id":1}' \
                 http://127.0.0.1:8080/jsonrpc | grep -q '"pong"'; then
              echo "HTTP JSON-RPC (8080) reachable."
            else
              echo "WARNING: HTTP JSON-RPC on port 8080 not reachable; proceeding because core is ready."
              docker exec kodi-runtime sh -c 'grep -i webserver /data/.kodi/temp/kodi.log || echo "(no webserver lines in log)"' || true
            fi

          # Optional: check TCP (9090) JSON-RPC socket
          if docker exec kodi-runtime sh -c 'ss -ltn | grep -q ":9090 "'; then
            echo "TCP JSON-RPC (9090) appears to be listening."
          else
            echo "NOTE: Port 9090 not observed listening."
          fi

          sleep 5

      - name: Show Kodi log (tail)
        run: |
          docker exec kodi-runtime sh -c 'echo "---- kodi.log tail ----"; tail -n 60 /data/.kodi/temp/kodi.log || echo "No kodi.log yet"'

      - name: Run tests
        run: pytest tests/

      - name: Stop Kodi (cleanup)
        if: always()
        run: |
          docker stop kodi-runtime 2>/dev/null || true
          docker rm kodi-runtime 2>/dev/null || true