name: Test jsbc.KodiLib

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kodi-tag: [Leia, Matrix, Nexus, Omega]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests

    - name: Verify Docker is installed
      run: docker --version    

    - name: Prepare Kodi config and run headless Docker
      run: |
        # Create config directory
        mkdir -p kodi-config/userdata
        
        # guisettings.xml: Enable webserver, disable updates and unnecessary services
        cat << EOF > kodi-config/userdata/guisettings.xml
        <settings version="2">
          <setting id="services.webserver" default="true">true</setting>
          <setting id="services.webserverport" default="true">8080</setting>
          <setting id="services.webskin" default="true">webinterface.default</setting>
          <setting id="services.zeroconf" default="true">true</setting>
          <setting id="services.airplay" default="true">false</setting>
          <setting id="services.airplayvolumecontrol" default="true">true</setting>
          <setting id="services.useairplaypassword" default="true">false</setting>
          <setting id="general.addonupdates" default="true">0</setting>
          <setting id="audiooutput.audiodevice" default="true">ALSA:default</setting>
          <setting id="audiooutput.passthrough" default="true">false</setting>
        </settings>
        EOF
        
        # advancedsettings.xml: Logging only
        cat << EOF > kodi-config/userdata/advancedsettings.xml
        <advancedsettings>
          <loglevel>2</loglevel>
        </advancedsettings>
        EOF
        
        # Pull and run headless Kodi Docker for specific version
        docker pull matthuisman/kodi-headless:${{ matrix.kodi-tag }}
        docker run -d --name kodi-headless \
          -p 8080:8080 \
          -v $(pwd)/kodi-config:/config/.kodi \
          --restart=no \
          matthuisman/kodi-headless:${{ matrix.kodi-tag }}
        
        # Remove version check add-on
        docker exec kodi-headless rm -rf /app/kodi/addons/service.xbmc.versioncheck || true
        
        # Wait for JSON-RPC to respond (with a longer timeout)
        for attempt in {1..3}; do
          timeout 300 bash -c 'until curl -s -f -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"JSONRPC.Ping\",\"id\":1}" http://localhost:8080/jsonrpc | grep -q "pong"; do
            echo "Waiting for Kodi to start (attempt $attempt)..."
            docker logs kodi-headless | tail -n 20
            sleep 5
          done' && { echo "Kodi is ready!"; break; } || {
            echo "Restarting Kodi container..."
            docker stop kodi-headless || true
            docker rm kodi-headless || true
            docker run -d --name kodi-headless \
              -p 8080:8080 \
              -v $(pwd)/kodi-config:/config/.kodi \
              --restart=no \
              matthuisman/kodi-headless:${{ matrix.kodi-tag }}
            docker exec kodi-headless rm -rf /app/kodi/addons/service.xbmc.versioncheck || true
            sleep 5
          }
        done
        
        if ! curl -s -f -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"JSONRPC.Ping\",\"id\":1}" http://localhost:8080/jsonrpc | grep -q "pong"; then
          echo "Kodi failed to start after retries"
          docker logs kodi-headless
          exit 1
        fi
        
        # Extra delay for full initialization
        sleep 45

    - name: Run tests
      run: |
        pytest tests/

    - name: Stop Kodi (cleanup)
      if: always()
      run: |
        docker stop kodi-headless || true
        docker rm kodi-headless || true