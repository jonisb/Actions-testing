name: Test jsbc.KodiLib

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest requests

    - name: Install Xvfb, Kodi, and PulseAudio
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb software-properties-common curl pulseaudio pulseaudio-utils
        sudo add-apt-repository -y ppa:team-xbmc/ppa
        sudo apt-get update
        sudo apt-get install -y kodi
        mkdir -p ~/.kodi/userdata
        cat << EOF > ~/.kodi/userdata/guisettings.xml
        <settings version="2">
          <setting id="services.webserver" default="true">true</setting>
          <setting id="services.webserverport" default="true">8080</setting>
          <setting id="services.webskin" default="true">webinterface.default</setting>
          <setting id="services.zeroconf" default="true">true</setting>
          <setting id="services.airplay" default="true">false</setting>
          <setting id="services.airplayvolumecontrol" default="true">true</setting>
          <setting id="services.useairplaypassword" default="true">false</setting>
          # Disable add-on auto-updates to prevent downloads during startup
          <setting id="general.addonupdates" default="true">0</setting>
        </settings>
        EOF
        cat << EOF > ~/.kodi/userdata/advancedsettings.xml
        <advancedsettings>
          <audio>
            <device>PULSE:dummy</device>
          </audio>
          <videohardware>
            <usevaapi>false</usevaapi>
            <usevdpau>false</usevdpau>
            <useopengl>false</useopengl>
            <useswrenderer>true</useswrenderer>
            <usedxva2>false</usedxva2>
            <usevda>false</usevda>
            <usevideotoolbox>false</usevideotoolbox>
          </videohardware>
          <gui>
            <algorithmdirtyregions>0</algorithmdirtyregions>
            <nofliptimeout>0</nofliptimeout>
          </gui>
          <loglevel>2</loglevel>
        </advancedsettings>
        EOF
        chmod 644 ~/.kodi/userdata/*.xml
        # Remove version check add-on to prevent update notifications and checks
        sudo rm -rf /usr/share/kodi/addons/service.xbmc.versioncheck

    - name: Start Xvfb
      run: |
        Xvfb :99 -screen 0 1024x768x24 &
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Start PulseAudio and Kodi
      run: |
        export DISPLAY=:99
        # Verify pulseaudio installation
        if ! command -v pulseaudio &> /dev/null; then
          echo "Error: pulseaudio command not found"
          dpkg -l | grep pulseaudio || true
          exit 1
        fi
        # Start PulseAudio with verbose logging
        pulseaudio --start --exit-idle-time=-1 --verbose > pulseaudio.log 2>&1 &
        PULSEAUDIO_PID=$!
        sleep 5  # Give PulseAudio time to start
        # Verify PulseAudio is running
        if ! ps aux | grep -q "[p]ulseaudio"; then
          echo "PulseAudio failed to start"
          cat pulseaudio.log
          exit 1
        fi
        # Create null sink
        pactl load-module module-null-sink sink_name=dummy
        # Verify null sink
        if ! pactl list sinks | grep -q "Name: dummy"; then
          echo "Failed to create PulseAudio null sink"
          pactl list sinks
          cat pulseaudio.log
          exit 1
        fi
        if ss -tuln | grep :8080; then
          echo "Port 8080 is in use, killing processes"
          sudo fuser -k 8080/tcp || true
        fi
        for attempt in {1..2}; do
          echo "Starting Kodi (attempt $attempt)"
          kodi --standalone &
          KODI_PID=$!
          timeout 90 bash -c 'until curl -s -f -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"JSONRPC.Ping\",\"id\":1}" http://localhost:8080/jsonrpc | grep -q "pong"; do
            echo "Waiting for Kodi to start..."
            ps aux | grep kodi || true
            cat ~/.kodi/temp/kodi.log || true
            sleep 5
          done' && { echo "Kodi is ready!"; break; } || {
            echo "Kodi failed to start, killing process"
            kill $KODI_PID || true
            sleep 5
          }
        done
        if ! curl -s -f -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"JSONRPC.Ping\",\"id\":1}" http://localhost:8080/jsonrpc | grep -q "pong"; then
          echo "Kodi failed to start after retries"
          cat ~/.kodi/temp/kodi.log
          cat pulseaudio.log
          exit 1
        fi
        # Add delay after ping succeeds to allow full initialization (e.g., avoid race with any remaining startup tasks)
        sleep 20

    - name: Run tests
      run: |
        export DISPLAY=:99
        pytest tests/

    - name: Stop Kodi and PulseAudio (cleanup)
      if: always()
      run: |
        pkill kodi || true
        pkill pulseaudio || true