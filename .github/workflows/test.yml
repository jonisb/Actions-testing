name: Test jsbc.KodiLib

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kodi-tag: [Matrix, Nexus, Omega]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      - name: Verify Docker
        run: docker --version

      - name: Prepare PulseAudio and config volume
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y pulseaudio
          pulseaudio --start --exit-idle-time=-1
          export PULSE_SERVER=127.0.0.1
          rm -rf kodi-config
          mkdir -p kodi-config/.kodi/userdata
          # Only advancedsettings.xml is safe to drop in early (Kodi will merge/keep)
          cat > kodi-config/.kodi/userdata/advancedsettings.xml <<'EOF'
          <advancedsettings>
            <loglevel>2</loglevel>
            <video>
              <headless>true</headless>
            </video>
          </advancedsettings>
          EOF

      - name: First (initializing) Kodi start
        run: |
          set -euxo pipefail
          export PULSE_SERVER=127.0.0.1
          docker pull fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}
          docker run -d --name kodi-init \
            -p 5900:5900 \
            -e PUID=$(id -u) \
            -e PGID=$(id -g) \
            -e TZ=UTC \
            -e PULSE_SERVER=127.0.0.1 \
            -v "$(pwd)/kodi-config:/data" \
            fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}

          echo "Waiting for Kodi to generate guisettings.xml..."
          timeout 60 bash -c 'until [ -s "kodi-config/.kodi/userdata/guisettings.xml" ]; do sleep 2; done'
          echo "Generated guisettings.xml size:"
          ls -l kodi-config/.kodi/userdata/guisettings.xml
          echo "Stopping initialization container..."
          docker stop kodi-init
          docker rm kodi-init

      - name: Patch guisettings.xml to enable web server
        run: |
          set -euxo pipefail
          GS="kodi-config/.kodi/userdata/guisettings.xml"

          if ! grep -q 'services.webserver' "$GS"; then
            echo "Unexpected: services.webserver setting not found; showing head:"
            head -n 40 "$GS"
          fi

          # Use sed to toggle the needed settings
          sed -i -E 's#(<setting id="services.webserver"[^>]*>)(true|false)(</setting>)#\1true\3#' "$GS"
          sed -i -E 's#(<setting id="services.webserverauthentication"[^>]*>)(true|false)(</setting>)#\1false\3#' "$GS"
          sed -i -E 's#(<setting id="services.webserverport"[^>]*>)[0-9]+(</setting>)#\18080\2#' "$GS"
          # Ensure username/password do not force auth; Kodi treats blank password + auth=false fine.
          if grep -q 'services.webserverusername' "$GS"; then
            sed -i -E 's#(<setting id="services.webserverusername"[^>]*>).*?(</setting>)#\1kodi\2#' "$GS" || true
          fi
            # Leave username (Kodi sometimes requires a value) but disable auth => ignored.
          if grep -q 'services.webserverpassword' "$GS"; then
            sed -i -E 's#(<setting id="services.webserverpassword"[^>]*)/>#\1 />#' "$GS" || true
          fi

          echo "Patched webserver lines:"
          grep -i -E 'webserver' "$GS"

      - name: Second (runtime) Kodi start with patched settings
        run: |
          set -euxo pipefail
          export PULSE_SERVER=127.0.0.1
          docker run -d --name kodi-runtime \
            -p 8080:8080 \
            -p 8000:8000 \
            -p 5900:5900 \
            -p 9090:9090 \
            -p 9777:9777/udp \
            -e PUID=$(id -u) \
            -e PGID=$(id -g) \
            -e TZ=UTC \
            -e PULSE_SERVER=127.0.0.1 \
            -v "$(pwd)/kodi-config:/data" \
            fhriley/kodi-headless-novnc:${{ matrix.kodi-tag }}

          echo "Waiting for port 8080 to open (web server)..."
          (
            for i in {1..60}; do
              if docker exec kodi-runtime sh -c 'ss -ltn 2>/dev/null | grep -q ":8080 "'; then
                echo "Port 8080 is listening."
                exit 0
              fi
              sleep 2
            done
            echo "Port 8080 never opened within 120s." >&2
            docker logs kodi-runtime --tail 120 || true
            echo "Kodi log (if exists):"
            docker exec kodi-runtime sh -c 'tail -n 200 /data/.kodi/temp/kodi.log || ls -l /data/.kodi/temp || true'
            exit 1
          )

          echo "Waiting for JSON-RPC pong..."
          start=$(date +%s)
          while true; do
            if curl -sf -H 'Content-Type: application/json' \
               --data '{"jsonrpc":"2.0","method":"JSONRPC.Ping","id":1}' \
               http://127.0.0.1:8080/jsonrpc | grep -q '"pong"'; then
              echo "JSON-RPC ready."
              break
            fi
            elapsed=$(( $(date +%s) - start ))
            if (( elapsed > 60 )); then
              echo "JSON-RPC did not respond within 60s after port open."
              docker logs kodi-runtime --tail 120 || true
              echo "Kodi log excerpt:"
              docker exec kodi-runtime sh -c 'tail -n 200 /data/.kodi/temp/kodi.log || true'
              exit 1
            fi
            sleep 2
          done

          # Short grace period
          sleep 5

      - name: Show Kodi log (debug)
        run: |
          set -e
          docker exec kodi-runtime sh -c 'echo "---- kodi.log tail ----"; tail -n 60 /data/.kodi/temp/kodi.log || echo "No kodi.log yet"'

      - name: Run tests
        run: pytest tests/

      - name: Stop Kodi (cleanup)
        if: always()
        run: |
          docker stop kodi-runtime 2>/dev/null || true
          docker rm kodi-runtime 2>/dev/null || true